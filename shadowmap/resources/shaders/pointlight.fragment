#version 130

in vec4 Position;
in vec3 Normal;
in vec2 TextureCoords;

uniform mat4 view;

uniform vec3 Ambient;
uniform vec3 LightPosition;
uniform vec3 HalfVector;

uniform sampler2D texture;
uniform sampler2DShadow shadowTexture;

in vec4 shadowCoords;

void main()
{
	vec3 LightColor = vec3(3);
	vec3 EyeDirection = vec3(0, 0, 1);

	vec3 lightDirection = LightPosition - vec3(Position);
	float lightDistance = length(lightDirection);
	lightDirection = lightDirection / lightDistance;

	float attenuation = 1.0 / (lightDistance);

	vec3 halfVector = normalize(lightDirection + EyeDirection);

	float f;
	if (shadowCoords.z < 0)
		f = 0;
	else
		f = textureProj(shadowTexture, shadowCoords);

	float diffuse = f * max(0.0, dot(Normal, lightDirection));
	float specular = max(0.0, dot(Normal, halfVector));

	if (diffuse == 0)
		specular = 0;
	else
		specular = pow(specular, 400);

	vec3 scatteredLight = Ambient + LightColor * diffuse * attenuation;
	vec3 reflectedLight = LightColor * specular * 0.5 * attenuation;

	vec4 color = texture2D(texture, TextureCoords);
	vec3 rgb = min(color.rgb * scatteredLight + reflectedLight, vec3(1.0));
	gl_FragColor = vec4(rgb, 1.0);
}
