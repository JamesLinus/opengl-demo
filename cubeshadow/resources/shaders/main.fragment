#version 130

in vec4 Position;
in vec3 Normal;
in vec4 WorldPosition;
in vec2 Texcoord;

uniform sampler2D tex;
uniform samplerCube shadowTexture;

uniform mat4 view;
uniform mat4 lightView;

uniform vec3 LightPosition;

float zNear = 1;
float zFar = 50;

float zNormalize(float d)
{
	return (d - zNear) / (zFar - zNear);
}

void main()
{
	vec4 Color = texture(tex, Texcoord);
	vec3 Ambient = vec3(0.1, 0.1, 0.2);
	vec3 LightColor = vec3(3);
	vec3 EyeDirection = vec3(0, 0, 1);

	vec4 cubespace_vector = lightView * WorldPosition;

	float shadow_distance = texture(shadowTexture, (cubespace_vector).xyz).x;
	float fragment_distance = zNormalize(length(cubespace_vector));

	vec3 eyespace_light_position = (view * vec4(LightPosition, 1.0)).xyz;
	vec3 lightDirection = eyespace_light_position - vec3(Position);
	float lightDistance = length(lightDirection);
	lightDirection = lightDirection / lightDistance;

	float cosTheta = clamp(dot(normalize(Normal), normalize(lightDirection)), 0, 1);
	float bias = 0.005*tan(acos(cosTheta));
	bias = clamp(bias, 0, 0.01);

	bool inShadow = fragment_distance > shadow_distance + bias;

	vec3 halfVector = normalize(lightDirection + EyeDirection);

	float attenuation = 1.0 / (length(cubespace_vector));
	float diffuse = inShadow ? 0 : 1;
	float specular = max(0.0, dot(Normal, halfVector));
	if (diffuse == 0)
		specular = 0;
	else
		specular = pow(specular, 400);

	vec3 scatteredLight = Ambient + LightColor * diffuse * attenuation;
	vec3 reflectedLight = LightColor * specular * 0.5 * attenuation;

	vec3 rgb = min(Color.rgb * scatteredLight + reflectedLight, 1.0 );
	gl_FragColor = vec4(rgb, 1.0);
}
